package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"context"
	"fmt"
	"todo-tasks/graph/generated"
	"todo-tasks/internal/domain/users"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, username string, email string, password string) (*users.User, error) {
	user, err := r.UserResolver.CreateUser(users.CreateUserDTO{
		Username: username,
		Email:    email,
		Password: password,
	})
	if err != nil {
		return nil, err
	}

	return user, nil
}

// LoginUser is the resolver for the loginUser field.
func (r *mutationResolver) LoginUser(ctx context.Context, email string, password string) (string, error) {
	_, token, err := r.AuthResolver.Login(email, password)
	if err != nil {
		return "", err
	}

	return token, nil
}

// Name is the resolver for the name field.
func (r *userResolver) Name(ctx context.Context, obj *users.User) (string, error) {
	panic(fmt.Errorf("not implemented: Name - name"))
}

// User returns generated.UserResolver implementation.
func (r *Resolver) User() generated.UserResolver { return &userResolver{r} }

type userResolver struct{ *Resolver }
